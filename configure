#!/bin/bash

# --with-linux-dir
# --with-module-dir
# --with-rtai-config
# --with-xenomai-dir

CC=gcc
DIR=$(readlink -f $(dirname $0))
CONFIG_DIR=$DIR/module_packages

init() {
    # Reset configuration directory
    rm -rf $CONFIG_DIR
    mkdir -p $CONFIG_DIR
}

check_headers() {
    # Check if directory contains configured kernel sources
    local LINUX_DIR=$1
    local VERSION_FILE

    if test -e $LINUX_DIR/include/linux/utsrelease.h; then
	VERSION_FILE=$LINUX_DIR/include/linux/utsrelease.h
    elif test -e $LINUX_DIR/include/generated/utsrelease.h; then
	VERSION_FILE=$LINUX_DIR/include/generated/utsrelease.h
    elif test -e $LINUX_DIR/include/linux/version.h; then
	VERSION_FILE=$LINUX_DIR/include/linux/version.h
    else
	# No version header file found
	return 1
    fi

    LINUX_UTSNAME=`$CC -E -dM ${VERSION_FILE} 2>/dev/null | \
	grep UTS | cut -d '"' -f 2`

    # Echo utsname for scripts that use it
    echo $LINUX_UTSNAME

    # Success if non-empty utsname string
    test -n "$LINUX_UTSNAME"
}

check_unique_header_directory() {
    # Check the directory hasn't been seen before
    local LINUX_DIR="$1"

    if test "$ALL_HEADER_DIRS" != "${ALL_HEADER_DIRS/$LINUX_DIR/}"; then
	usage "Same header directory specified twice: '$LINUX_DIR'"
    fi

    ALL_HEADER_DIRS+="$LINUX_DIR "
}

do_vanilla() {
    local LINUX_DIR="$(readlink -f "$1")"
    local LINUX_UTSNAME=$(check_headers $LINUX_DIR)

    # Run checks
    if test -z "$LINUX_UTSNAME"; then
	usage "Configured kernel sources not found in '$LINUX_DIR'"
    fi
    check_unique_header_directory $LINUX_DIR

    # Create config script
    log "Configuring kernel headers into '$CONFIG_DIR/$LINUX_UTSNAME'"
    {
	echo "LINUX_DIR=$LINUX_DIR"
	echo "LINUX_UTSNAME=$LINUX_UTSNAME"
    } > $CONFIG_DIR/$LINUX_UTSNAME
    ALL_UTSNAMES+="$LINUX_UTSNAME "
}

do_rtai() {
    # Set up RTAI kernel modules using given rtai-config
    local RTAI_CONFIG="$1"
    local LINUX_DIR=$(readlink -f $($RTAI_CONFIG --linux-dir))
    local LINUX_UTSNAME=$(check_headers $LINUX_DIR)

    do_vanilla $LINUX_DIR

    # Add to config script
    {
	echo "RTAI_CONFIG=$RTAI_CONFIG"
    } >> $CONFIG_DIR/$LINUX_UTSNAME
}

check_all_header_directories() {
    local LINUX_DIR
    for LINUX_DIR in /usr/src/linux-headers*; do
	log "Checking header directory '${LINUX_DIR}'..."

	# At least check it's a directory
	if ! test -d "$(readlink -f $LINUX_DIR)"; then
	    log "   ...not a directory!"
	    continue
	fi

	# Check header directory is configured
	if ! check_headers $LINUX_DIR >/dev/null; then
	    log "   ...no configured kernel source found"
	    continue
	fi

	# Configure it
	log "   ...configured kernel source found"
	do_vanilla $LINUX_DIR
    done
}

render_file() {
    # Fill out a template file with values from config filename in
    # debian/module_packages
    local TEMPLATE_FILE="$1"
    local CONFIG_FILE="$CONFIG_DIR/$2"

    (
	source "$CONFIG_FILE"
	sed "$TEMPLATE_FILE" \
	    -e "s%@RTAI_CONFIG@%${RTAI_CONFIG}%" \
	    -e "s%@LINUX_DIR@%${LINUX_DIR}%" \
	    -e "s%@LINUX_UTSNAME@%${LINUX_UTSNAME}%" \
	    -e "s%@KERNEL_HEADERS@%${KERNEL_HEADERS}%" \
	    -e "s%@ALL_UTSNAMES@%${ALL_UTSNAMES}%"
    )
}

render_control() {
    local UTSNAME
    local KERNEL_HEADERS="KERNEL_HEADERS='"

    log "Rendering base control file"
    for UTSNAME in $ALL_UTSNAMES; do
	KERNEL_HEADERS+="linux-headers-${UTSNAME}, "
    done
    KERNEL_HEADERS="${KERNEL_HEADERS%, }'"
    echo "${KERNEL_HEADERS}" > $CONFIG_DIR/base
    render_file $DIR/control.in base > $DIR/control

    # module package control rendering
    for UTSNAME in $ALL_UTSNAMES; do
	log "Rendering control file entry for kernel utsname '${UTSNAME}'"
	render_file $DIR/control.modules.in $UTSNAME >> $DIR/control
    done
}

render_module_packages() {
    local UTSNAME
    for UTSNAME in $ALL_UTSNAMES; do
	log "Rendering package files for kernel utsname '${UTSNAME}'"
	render_file $DIR/igh-ethercat-modules.install.in $UTSNAME >> \
	    $DIR/igh-ethercat-modules-$UTSNAME.install
	cp $DIR/igh-ethercat-modules.postinst.in \
	    $DIR/igh-ethercat-modules-$UTSNAME.postinst
	cp $DIR/igh-ethercat-modules.prerm.in \
	    $DIR/igh-ethercat-modules-$UTSNAME.prerm
    done
    
}

render_rules() {
    local UTSNAME
    echo "ALL_UTSNAMES='${ALL_UTSNAMES}'" > $CONFIG_DIR/base
    render_file $DIR/rules.in base > $DIR/rules
}

usage() {
    {
	test -z "$*" || echo "$*"
	echo "usage:  $0 [ OPTS ... ] [ LINUX_DIRECTORY ... ]"
	echo "    (no arguments:  build against all found kernel headers)"
	echo "    -r RTAI-CONFIG      specify headers by rtai-config script"
	echo "    -h                  print this help"
	echo "    LINUX_DIRECTORY     path(s) to configured linux sources"
    } 1>&2
    exit 1
}

log() {
    echo "$@" 1>&2
}

# Initialize
init

# Lists of all kernel headers directories and kernel utsnames
ALL_HEADER_DIRS=" "
ALL_UTSNAMES=" "

# Default:  build modules for all kernel headers
DO_ALL=true

while getopts h?r: ARG; do
    case $ARG in
	h | \?)  usage ;;
	r)  do_rtai $OPTARG; DO_ALL=false ;;
	*)  usage "Unknown argument '$ARG'" ;;
    esac
done

# Any remaining args should be non-RTAI header directories
shift $((OPTIND-1))
for LINUX_DIR in "$@"; do
    do_vanilla $LINUX_DIR
    DO_ALL=false
done


$DO_ALL && check_all_header_directories


# Finally, do the real work to set up the package
render_control
render_module_packages
render_rules
